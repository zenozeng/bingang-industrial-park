// Generated by CoffeeScript 1.6.1
/*
Copyright (C) 2013 Zeno Zeng

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

var Cache, Data, Gallery, Router, View, WP, config, data, fn, gallery, route, router, routes, view,
  __slice = [].slice;

WP = (function() {
  /*
  Constructor
  
  @example Constructor
     wp = new WP 'http://example.org/wordpress/', {postPerPage: 5}
  
  @param [String] @url wordpress url
  @param [Object] opts config options
  */

  function WP(url, opts) {
    var key, value;
    this.url = url;
    this.debug = false;
    this.opts = {
      useFakeData: false,
      postPerPage: 10,
      useComments: false
    };
    if (opts) {
      for (key in opts) {
        value = opts[key];
        this.opts[key] = value;
      }
    }
  }

  /*
  Get data according to WordPress's JSON API
  @see http://wordpress.org/plugins/json-api/other_notes/
  
  @example Constructor
    wp = new WP 'http://example.org/wordpress/', {postPerPage: 5}
    @get 'get_category_index', callback
  
  @param [String] method method
  @param [Object] obj Query parameters
  @param [Function] callback function to handle results
  */


  WP.prototype.get = function() {
    var args, callback, method, obj, _i;
    method = arguments[0], obj = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
    obj = obj.length > 0 ? obj[0] : {};
    if (this.opts.useFakeData) {
      return fake(method, obj, callback);
    }
    obj.json = method ? method : 1;
    args = {
      type: 'get',
      url: this.url,
      dataType: 'jsonp',
      jsonp: 'callback',
      data: obj,
      success: callback
    };
    return $.ajax(args);
  };

  /*
  Return fake data for local testing
  
  @param [String] method method
  @param [Object] obj Query parameters
  @param [Function] callback function to handle results
  */


  WP.prototype.fake = function(method, obj, callback) {
    if (method === 'get_recent_posts') {
      method = 'get_posts';
    }
    return $.get('fake/' + method + '.json', callback);
  };

  /*
  Get single post object by id
  
  @param [Interger] id Post ID
  @param [Function] callback function to handle results
  */


  WP.prototype.post = function(id, callback) {
    return this.get('get_post', {
      post_id: id
    }, function(data) {
      return callback(data.post);
    });
  };

  /*
  Get posts according to WordPress's WP_Query parameters
  
  @see http://codex.wordpress.org/Class_Reference/WP_Query#Parameters
  
  @example Query Example
     wp = new WP
     wp.posts {category_name='staff', tag='work'}, 2, callback
  
  @param [Object] args WP_Query parameters
  @param [Interger] page Paged Number
  @param [Function] callback function to handle results
  
  @note Will return recent posts if args is {}
  @note The one default parameter is ignore_sticky_posts=1 (this can be overridden).
  */


  WP.prototype.posts = function() {
    var args, callback, method, page, _i;
    args = arguments[0], page = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
    if (JSON.stringify(args === '{}')) {
      method = 'get_recent_posts';
    } else {
      method = 'get_posts';
    }
    args.posts_per_page = this.opts.postsPerPage;
    if (page.length > 0) {
      args.paged = page[0];
    }
    return this.get(method, args, callback);
  };

  /*
  Get posts whose categorie ID is ID
  
  @param [Interger] id the id of categorie
  @param [Interger] page Paged Number
  @param [Function] callback function to handle results
  */


  WP.prototype.categorie = function() {
    var callback, id, page, _i;
    id = arguments[0], page = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
    if (this.debug) {
      console.log(["wp:cat", id, page, callback]);
    }
    return this.posts({
      cat: id,
      exclude: 'content'
    }, page[0], callback);
  };

  /*
  Get posts whose tag is TITLE
  
  @param [String] title the title of tag
  @param [Interger] page Paged Number
  @param [Function] callback function to handle results
  */


  WP.prototype.tag = function() {
    var callback, page, title, _i,
      _this = this;
    title = arguments[0], page = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
    return this.tags(function(tags) {
      var id, tag, _j, _len, _results;
      _results = [];
      for (_j = 0, _len = tags.length; _j < _len; _j++) {
        tag = tags[_j];
        if (tag.title === title) {
          id = tag.id;
          _results.push(_this.posts({
            tag_id: id
          }, page[0], callback));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
  };

  /*
  Search posts with keyword
  
  @param [String] keyword
  @param [Interger] page Paged Number
  @param [Function] callback function to handle results
  */


  WP.prototype.search = function() {
    var callback, keyword, page, _i;
    keyword = arguments[0], page = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
    return this.posts({
      s: keyword
    }, page[0], callback);
  };

  /*
  Get all active categories
  
  @param [Function] callback function to handle results
  @return [Array] categories, sth like [{"id":4,"slug":"cat","title":"catTitle","description":"","parent":0,"post_count":1}, {...}, {...}]
  */


  WP.prototype.categories = function(callback) {
    return this.get('get_category_index', function(obj) {
      return callback(obj.categories);
    });
  };

  /*
  Get all active tags
  
  @param [Function] callback function to handle results
  @return [Array] tags, sth like [{"id":8,"slug":"tagSlut","title":"tagTitle","description":"","post_count":1}, {...}, {...}]
  */


  WP.prototype.tags = function(callback) {
    return this.get('get_tag_index', function(obj) {
      return callback(obj.tags);
    });
  };

  /*
  Submit a comment on a POST
  
  @param [Interger] postId id of post
  @param [String] name the name of current visitor
  @param [String] email the email of current visitor
  @param [String] content comment content
  @param [Function] callback function to handle results
  */


  WP.prototype.comment = function(postId, name, email, content, callback) {
    var args;
    args = {
      post_id: postId,
      name: name,
      email: email,
      content: content
    };
    return this.get('respond.submit_comment', args, callback);
  };

  /*
  Get data according to WordPress's JSON API Extra
  
  @param [String] method method
  @param [Object] data Query parameters
  @param [Function] callback function to handle results
  */


  WP.prototype.getExtra = function(method, data, callback) {
    var args;
    data.jsonextra = method;
    args = {
      type: 'get',
      url: this.url,
      dataType: 'jsonp',
      jsonp: 'callback',
      data: data,
      success: callback
    };
    return $.ajax(args);
  };

  /*
  Get Last Modified Time (Changes when a post/page modified), will get sth like this: {"lastModified":1375794257}
  
  @param [Function] callback function to handle results
  */


  WP.prototype.lastModified = function(callback) {
    return this.getExtra('lastModified', {}, callback);
  };

  return WP;

})();

/*
Cache.coffee -- Handle cache & queue for data

Requirements: underscore.js

Licensed under the MIT license.

Copyright (C) 2013 Zeno Zeng

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/


Cache = (function() {
  /*
  Constructor
  
  @example Constructor
     cache = new Cache {prefix: "myprefix_"}
  
  @param [Object] opts config options
  */

  function Cache(opts) {
    var defaults;
    this.events = {};
    this.tmp = {};
    this.queue = {};
    this.debug = false;
    defaults = {
      prefix: 'myCachePrefix_'
    };
    this.opts = _.extend(defaults, opts);
    this.storage = null;
    if ((typeof $ !== "undefined" && $ !== null) && ($.jStorage != null)) {
      this.storage = {
        backend: 'jStorage',
        keys: $.jStorage.index,
        getItem: $.jStorage.get,
        setItem: $.jStorage.set,
        removeItem: $.jStorage.deleteKey
      };
    }
    if (window.localStorage != null) {
      this.storage = {
        backend: 'localStorage',
        keys: function() {
          var key, keys;
          keys = [];
          for (key in window.localStorage) {
            keys.push(key);
          }
          return keys;
        },
        getItem: function(key) {
          return window.localStorage.getItem(key);
        },
        setItem: function(key, value) {
          return window.localStorage.setItem(key, value);
        },
        removeItem: function(key) {
          return window.localStorage.removeItem(key);
        }
      };
    }
  }

  /*
  Trigger event
  
  @param [String] event event name
  @param [Object] args event args
  */


  Cache.prototype.trigger = function(event, args) {
    var callback, _i, _len, _ref, _results;
    if (this.events[event] != null) {
      _ref = this.events[event].callbacks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        _results.push(callback(args));
      }
      return _results;
    }
  };

  /*
  Attach callback on data event
  
  @param [String] event event name
  @param [Function] callback function to handle event
  */


  Cache.prototype.on = function(event, callback) {
    if (this.events[event] == null) {
      this.events[event] = {
        callbacks: []
      };
    }
    return this.events[event].callbacks.push(callback);
  };

  /*
  Get data, return from cache first, and update it in the background
  
  @example Get Data
    cache = new Cache {prefix: "myprefix_"}
    cache.get
      id: 'post-123'
      fetch: (success, error) ->
        $.ajax {url: 'http://eample.com/abc', success: success, error: error}
      parse: (data) ->
        JSON.parse data
      validate: (data) ->
        data.status is 'ok'
      # tell whether should update data in the background, could be true || false || function 
      update: () ->
        lastModified > lastUpdated
      updateAfter: (callback) ->
        data.ready(callback)
      success: successCallback
      error: errorCallback
  
  @param [Object] args data args
  */


  Cache.prototype.get = function(args) {
    var id, storageItem, success, update, updateAfter,
      _this = this;
    args.id = this.opts.prefix + args.id;
    id = args.id, update = args.update, updateAfter = args.updateAfter, success = args.success;
    if (this.tmp[id] != null) {
      if (this.debug) {
        console.log("RAM::" + id);
      }
      return typeof success === "function" ? success(this.tmp[id]) : void 0;
    } else {
      storageItem = (function() {
        var data;
        if (_this.storage != null) {
          data = _this.storage.getItem(id);
          if (data != null) {
            try {
              data = JSON.parse(data);
            } catch (e) {
              return false;
            }
            if ((data != null) && (data.timestamp != null) && (data.data != null)) {
              return data.data;
            }
          }
        }
        return false;
      })();
      if (storageItem) {
        if (this.debug) {
          console.log("Storage::" + id);
        }
        if (typeof success === "function") {
          success(storageItem);
        }
        args.success = null;
        if (update == null) {
          update = true;
        }
        if (updateAfter != null) {
          return updateAfter(function() {
            if (typeof update === 'function') {
              update = update();
            }
            if (!update) {
              return;
            }
            if (_this.debug) {
              console.log("Update(With Delay)::" + id);
            }
            return _this.fetch(args);
          });
        } else {
          if (typeof update === 'function') {
            update = update();
          }
          if (update) {
            if (this.debug) {
              console.log("Update(Now)::" + id);
            }
            return this.fetch(args);
          }
        }
      } else {
        return this.fetch(args);
      }
    }
  };

  /*
  Return last update timestamp of cache (microtime)
  
  @param [String] id cache id
  @return [Interger] time stamp
  */


  Cache.prototype.timestamp = function(id) {
    var data;
    id = this.opts.prefix + id;
    if (this.storage != null) {
      data = this.storage.getItem(id);
      data = JSON.parse(data);
      if ((data != null) && (data.timestamp != null) && (data.data != null)) {
        return data.timestamp;
      }
    }
    return 0;
  };

  /*
  Fetch data, and update it in the background
  
  @example Fetch Data
    cache = new Cache {prefix: "myprefix_"}
    cache.fetch
      id: 'post-123'
      fetch: (success, error) ->
        $.ajax {url: 'http://eample.com/abc', success: success, error: error}
      parse: (data) ->
        JSON.parse data
      validate: (data) ->
        data.status is 'ok'
      # tell whether should update data in the background, could be true || false || function 
      update: () ->
        lastModified > lastUpdated
      success: successCallback
      error: errorCallback
  
  @param [Object] args data args
  */


  Cache.prototype.fetch = function(args) {
    var callback, error, fetch, id, parse, success, validate,
      _this = this;
    id = args.id, fetch = args.fetch, parse = args.parse, validate = args.validate, success = args.success, error = args.error;
    if (!parse) {
      parse = function(data) {
        return data;
      };
    }
    if (!validate) {
      validate = function(data) {
        return true;
      };
    }
    if (!error) {
      error = function(e) {
        if (_this.debug) {
          return console.log(e);
        }
      };
    }
    if (this.queue[id]) {
      if (this.debug) {
        console.log("Queue::" + id);
      }
      callback = _.once(success);
      return this.on('load', function(e) {
        if (e.id === id) {
          return callback(e.data);
        }
      });
    } else {
      if (this.debug) {
        console.log("Fetch::" + id);
      }
      this.queue[id] = true;
      return fetch(function(data) {
        data = parse(data);
        if (validate(data)) {
          _this.save(id, data);
          _this.queue[id] = false;
          _this.trigger('load', {
            id: id,
            data: data
          });
          return typeof success === "function" ? success(data) : void 0;
        } else {
          return error({
            name: 'DATA_INVALID_ERR'
          });
        }
      });
    }
  };

  /*
  Save data to cache
  
  @param [String] id data's Cache ID
  @param [Object] data data
  */


  Cache.prototype.save = function(id, data) {
    if (this.debug) {
      console.log("Save::" + id);
    }
    this.tmp[id] = data;
    data = {
      timestamp: (new Date()).getTime(),
      data: data
    };
    data = JSON.stringify(data);
    if (this.storage != null) {
      try {
        this.storage.setItem(id, data);
      } catch (e) {
        if (e.name === 'QUOTA_EXCEEDED_ERR') {
          this.clear();
          try {
            this.storage.setItem(id, data);
          } catch (e) {
            false;
          }
        }
      }
      if (this.storage.backend === 'jStorage') {
        if (this.storage.getItem(id) == null) {
          this.clear();
          return this.storage.setItem(id, data);
        }
      }
    }
  };

  /*
  Clear all storage items with prefix
  */


  Cache.prototype.clear = function() {
    var key, _i, _len, _ref, _results;
    _ref = this.storage.keys();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      if (key.indexOf(this.opts.prefix === 0)) {
        _results.push(this.storage.removeItem(key));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return Cache;

})();

/*

配置文件
*/


config = {
  uyanHTML: '<div id="uyan_frame"></div>\
    <script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=1822392"></script>',
  wpUrl: 'http://61.153.203.166/',
  baseUrl: 'http://bgic.cn/',
  indexImagesJSONP: 'http://61.153.203.166/?page_id=7&json=1',
  linksJSONP: 'http://61.153.203.166/?page_id=12&json=1',
  indexSections: [4, 9, 3, 5, 8]
};

Data = (function() {
  /*
  Constructor
  
  @example Constructor
     data = new Data 'http://example.org/wordpress/', {postPerPage: 5}
  
  @param [String] @url wordpress url
  @param [Object] opts config options
  */

  function Data(url, opts) {
    var _this = this;
    this.url = url;
    this.wp = new WP(this.url);
    this.debug = false;
    this.updateList = [];
    this.wp.lastModified(function(data) {
      _this.lastModified = data.lastModified;
      return _this.trigger('ready');
    });
    this.cache = new Cache({
      prefix: 'bingang_new_'
    });
    this.events = {};
  }

  /*
  Attach callback on data event
  
  @param [String] event
  @param [Function] callback
  */


  Data.prototype.on = function(event, callback) {
    if (this.events[event] == null) {
      this.events[event] = {
        callbacks: []
      };
    }
    return this.events[event].callbacks.push(callback);
  };

  /*
  Trigger event
  
  @param [String] event
  @param [Object] args
  */


  Data.prototype.trigger = function(event, args) {
    var callback, _i, _len, _ref, _results;
    if (this.events[event] != null) {
      _ref = this.events[event].callbacks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        _results.push(callback(args));
      }
      return _results;
    }
  };

  /*
  Attach callback on ready
  
  @param [Function] callback
  */


  Data.prototype.ready = function(callback) {
    if (this.lastModified != null) {
      return typeof callback === "function" ? callback() : void 0;
    } else {
      return this.on('ready', callback);
    }
  };

  /*
  Get data via cache.coffee
  API see require/cache.coffee Cache.get()
  */


  Data.prototype.getCache = function(args) {
    var error, fetch, id, parse, success, update, updateAfter, validate,
      _this = this;
    id = args.id, fetch = args.fetch, parse = args.parse, validate = args.validate, success = args.success, error = args.error;
    update = function() {
      return _this.cache.timestamp(id) < _this.lastModified * 1000;
    };
    updateAfter = function(callback) {
      return _this.ready(callback);
    };
    return this.cache.get({
      id: id,
      fetch: fetch,
      parse: parse,
      update: update,
      success: success,
      updateAfter: updateAfter
    });
  };

  Data.prototype.imgs = function(callback) {
    var fetch, parse;
    fetch = function(callback) {
      var args;
      args = {
        type: 'get',
        url: config.indexImagesJSONP,
        dataType: 'jsonp',
        jsonp: 'callback',
        success: callback
      };
      return $.ajax(args);
    };
    parse = function(data) {
      var html, images, regexp;
      html = data.page.content;
      regexp = new RegExp('src="([^"]*)"', 'g');
      images = html.match(regexp);
      return images = images.map(function(html) {
        return html.replace(new RegExp('(src=|")', 'g'), '');
      });
    };
    return this.getCache({
      id: 'imgs',
      fetch: fetch,
      parse: parse,
      success: callback
    });
  };

  Data.prototype.links = function(callback) {
    var fetch, parse;
    fetch = function(callback) {
      var args;
      args = {
        type: 'get',
        url: config.linksJSONP,
        dataType: 'jsonp',
        jsonp: 'callback',
        success: callback
      };
      return $.ajax(args);
    };
    parse = function(data) {
      var links, regexp;
      regexp = new RegExp('<a[^<>]*>[^<>]*<\/a>', 'g');
      return links = data.page.content.match(regexp);
    };
    return this.getCache({
      id: 'links',
      fetch: fetch,
      parse: parse,
      success: callback
    });
  };

  Data.prototype.categorie = function(args, callback) {
    var page, title, _ref,
      _this = this;
    _ref = [args[0], args[1]], title = _ref[0], page = _ref[1];
    return this.get('categories', function(categories) {
      var catID, categorie, fetch, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = categories.length; _i < _len; _i++) {
        categorie = categories[_i];
        if (categorie.title === title) {
          catID = categorie.id;
          fetch = function(callback) {
            return _this.wp.categorie(catID, page, callback);
          };
          _results.push(_this.getCache({
            id: "cat:" + catID + ":page:" + page,
            fetch: fetch,
            success: callback
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
  };

  /*
  Get data via WP class, and cache data
  
  @param [String] method will call wp.method
  */


  Data.prototype.get = function() {
    var args, cacheID, callback, fetch, keyArgs, method, _i,
      _this = this;
    method = arguments[0], args = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
    if (method === 'imgs') {
      return this.imgs(callback);
    } else if (method === 'links') {
      return this.links(callback);
    } else if (method === 'categorie') {
      return this.categorie(args, callback);
    } else {
      keyArgs = args.filter(function(arg) {
        return typeof arg !== 'function';
      });
      cacheID = method + ':' + JSON.stringify(keyArgs);
      fetch = function(callback) {
        args.push(callback);
        return _this.wp[method].apply(_this.wp, args);
      };
      return this.getCache({
        id: cacheID,
        fetch: fetch,
        success: callback
      });
    }
  };

  return Data;

})();

data = new Data(config.wpUrl);

Gallery = (function() {
  /*
  Constructor
  
  @param [Array] imgs src of imgs
  */

  function Gallery() {
    this.readyCallbacks = [];
    this.imgs = [];
    this.width = 900;
    this.height = 360;
    this.loaded = false;
  }

  /*
  Set imgs
  
  @param [Array] imgs src of imgs
  */


  Gallery.prototype.set = function(imgs) {
    var callback, _i, _len, _ref;
    this.imgs = imgs;
    _ref = this.readyCallbacks;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      callback = _ref[_i];
      this.ready(callback);
    }
    return this.readyCallbacks = [];
  };

  /*
  Ready
  
  @param [Function] callback function to call when gallery was ready
  */


  Gallery.prototype.ready = function(callback) {
    if (this.imgs.length > 0) {
      return typeof callback === "function" ? callback() : void 0;
    } else {
      return this.readyCallbacks.push(callback);
    }
  };

  /*
  Load first image adn then Show gallery
  */


  Gallery.prototype.start = function() {
    var show,
      _this = this;
    show = function() {
      var interval;
      $('#gallery #img').html("<img src=\"" + _this.imgs[0] + "\" alt=\"gallery-img\">");
      _this.count++;
      interval = function() {
        return (function(that) {
          return that.next();
        })(_this);
      };
      if (_this.interval != null) {
        clearInterval(_this.interval);
      }
      _this.interval = setInterval(interval, 3000);
      return _this.setImgScale(function() {
        if (!$('#gallery').is(':visible')) {
          return $('#gallery').slideDown();
        }
      });
    };
    return this.ready(function() {
      var img;
      _this.count = 0;
      if (_this.loaded) {
        return show();
      } else {
        img = new Image();
        img.src = _this.imgs[0];
        return img.onload = function() {
          _this.loaded = true;
          return show();
        };
      }
    });
  };

  /*
  Hide Gallery and  clear interval
  */


  Gallery.prototype.close = function() {
    $('#gallery').hide();
    if (this.interval != null) {
      return clearInterval(this.interval);
    }
  };

  /*
  Preload next image
  */


  Gallery.prototype.preload = function() {
    var nextImage;
    if (this.count < this.imgs.length) {
      nextImage = this.imgs[this.count];
      return (new Image()).src = nextImage;
    }
  };

  /*
  Switch to next image, and preload the next one
  */


  Gallery.prototype.next = function() {
    var img, index,
      _this = this;
    index = this.count % this.imgs.length;
    img = this.imgs[index];
    this.count++;
    return $('#gallery #img').fadeOut(400, function() {
      $('#gallery #img').html("<img src=\"" + img + "\" alt=\"gallery-img\">");
      return _this.setImgScale(function() {
        $('#gallery #img').fadeIn(400);
        return _this.preload();
      });
    });
  };

  /*
  Resize the image to fit scale
  */


  Gallery.prototype.setImgScale = function(callback) {
    var $this, that;
    $this = $('#gallery #img img');
    that = this;
    return $this.attr('src', $(this).attr('src')).load(function() {
      var boxHeight, boxScale, boxWidth, imgHeight, imgScale, imgWidth, left, newHeight, newWidth, top;
      $this = $('#gallery #img img');
      imgWidth = this.width;
      imgHeight = this.height;
      imgScale = imgWidth / imgHeight;
      boxWidth = that.width;
      boxHeight = that.height;
      boxScale = boxWidth / boxHeight;
      if (imgScale > boxScale) {
        $this.height(boxHeight);
        newWidth = boxHeight / imgHeight * imgWidth;
        left = (newWidth - boxWidth) / 2;
        $this.css({
          height: boxHeight,
          width: 'auto',
          left: -left,
          top: 0
        });
      } else {
        newHeight = boxWidth / imgWidth * imgHeight;
        top = (newHeight - boxHeight) / 2;
        $this.css({
          height: 'auto',
          width: boxWidth,
          left: 0,
          top: -top
        });
      }
      return typeof callback === "function" ? callback() : void 0;
    });
  };

  return Gallery;

})();

gallery = new Gallery;

data.get('imgs', function(imgs) {
  return gallery.set(imgs);
});

View = (function() {
  /*
  Constructor
  */

  function View() {
    var _this = this;
    this.events = {};
    this.data = data;
    this.loading();
    this.data.get('categories', function(categories) {
      var html;
      html = categories.map(function(cat) {
        return "<li class=\"categorie\">          <a href=\"#!/categorie/" + cat.title + "\">" + cat.title + "</a>        </li>";
      });
      return $('nav ul').html(html);
    });
    this.data.on('update', function(args) {
      if (_this.current() !== 'post') {
        return _this.refresh();
      }
    });
    this.on('updateneeded', function(args) {
      _this.loading();
      if (args.to !== 'post') {
        _this.resetUyan();
      }
      if (args.to !== 'index') {
        return gallery.close();
      }
    });
  }

  /*
  Show loading
  */


  View.prototype.loading = function() {
    return $('main').html('<div id="loading"></div>');
  };

  /*
  Attach callback on view event
  
  @param [String] event
  @param [Function] callback
  */


  View.prototype.on = function(event, callback) {
    if (this.events[event] == null) {
      this.events[event] = {
        callbacks: []
      };
    }
    return this.events[event].callbacks.push(callback);
  };

  /*
  Trigger event
  
  @param [String] event
  @param [Object] args
  */


  View.prototype.trigger = function(event, args) {
    var callback, _i, _len, _ref, _results;
    if (this.events[event] != null) {
      _ref = this.events[event].callbacks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        _results.push(callback(args));
      }
      return _results;
    }
  };

  /*
  Set currentView or Get it if called without any args
  
  @param [String] view new view
  @return [String] current view
  */


  View.prototype.current = function(view) {
    if (view) {
      $('main').attr('id', view);
      this.trigger('updateneeded', {
        from: this.currentView,
        to: view
      });
      return this.currentView = view;
    } else {
      return this.currentView;
    }
  };

  /*
  Reset UYAN's vars to make reload UYAN possible
  
  @param [Function] callback callback to run when done
  */


  View.prototype.resetUyan = function(callback) {
    var pending, resetVars, scripts;
    resetVars = function() {
      var v, _i, _len, _ref;
      _ref = ["_config", "_loaded", "_c_g", "_s_g", "_style_loaded", "_style_loaded_over"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        window["uyan" + v] = void 0;
      }
      return window.uyan_config = {
        title: $('title').text() + ' #滨港工业城#',
        url: config.baseUrl + window.location.hash,
        su: window.location.hash ? window.location.hash.replace('#', '') : '滨港工业城'
      };
    };
    scripts = $('head script');
    pending = scripts.length;
    if (pending === 0) {
      resetVars();
      return typeof callback === "function" ? callback() : void 0;
    } else {
      return scripts.each(function() {
        var id, src;
        pending--;
        src = $(this).attr('src');
        id = $(this).attr('id');
        if ((src && (src.indexOf('uyan') > -1)) || (id && (id.indexOf('uyan') > -1))) {
          $(this).remove();
        }
        if (pending === 0) {
          resetVars();
          return typeof callback === "function" ? callback() : void 0;
        }
      });
    }
  };

  /*
  Callback HTML for sidebar section
  
  @param [Function] callback callback to handle html
  */


  View.prototype.sidebar = function(callback) {
    return this.data.get('links', function(links) {
      links = links.map(function(link) {
        return "<li>" + link + "</li>";
      });
      links = links.join('');
      return callback('<div id="sidebar">\
        <div id="search">\
          <h2><i class="icon-search"></i>全站搜索</h2>\
          <div id="search-box">\
            <input id="search-input" type="text">\
            <i class="icon-search"></i>\
          </div>\
        </div>\
        <div id="admin">\
          <h2><i class="icon-cogs"></i>后台管理</h2>\
          <ul>\
            <li><a href="' + config.wpUrl + 'wp-admin/">后台管理</a></li>\
            <li><a href="http://www.uyan.cc/sites">评论管理</a></li>\
          </ul>\
        </div>\
        <div id="links">\
          <h2><i class="icon-external-link"></i>友情链接</h2>\
          <ul>' + links + '</ul>\
        </div>\
      </div>');
    });
  };

  /*
  Return HTML for page nav
  
  @param [Interger] sum sum of pages
  @param [Interger] current current page number (starts from 1)
  */


  View.prototype.pageNav = function(sum, current) {
    var html, left, maxPageDistance, navs, right, _i, _j, _k, _l, _m, _ref, _ref1, _results, _results1, _results2, _results3, _results4,
      _this = this;
    if (!(sum > 1)) {
      return '';
    }
    maxPageDistance = 3;
    if (sum <= maxPageDistance * 2) {
      navs = (function() {
        _results = [];
        for (var _i = 1; 1 <= sum ? _i <= sum : _i >= sum; 1 <= sum ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
    } else {
      if (current - 1 > maxPageDistance) {
        left = [1, '...'];
        left = left.concat((function() {
          _results1 = [];
          for (var _j = _ref = current - maxPageDistance; _ref <= current ? _j < current : _j > current; _ref <= current ? _j++ : _j--){ _results1.push(_j); }
          return _results1;
        }).apply(this));
      } else {
        left = (function() {
          _results2 = [];
          for (var _k = 1; 1 <= current ? _k < current : _k > current; 1 <= current ? _k++ : _k--){ _results2.push(_k); }
          return _results2;
        }).apply(this);
      }
      if (sum - current > maxPageDistance) {
        right = (function() {
          _results3 = [];
          for (var _l = current, _ref1 = current + maxPageDistance; current <= _ref1 ? _l <= _ref1 : _l >= _ref1; current <= _ref1 ? _l++ : _l--){ _results3.push(_l); }
          return _results3;
        }).apply(this);
        right = right.concat(['...', sum]);
      } else {
        right = (function() {
          _results4 = [];
          for (var _m = current; current <= sum ? _m <= sum : _m >= sum; current <= sum ? _m++ : _m--){ _results4.push(_m); }
          return _results4;
        }).apply(this);
      }
      navs = left.concat(right);
    }
    html = navs.map(function(i) {
      var extraClass, href, page, prefix;
      prefix = _this.current() === 'index' ? "#!/page/" : "#!/" + (_this.current()) + "/" + router.args[0] + "/";
      page = i === '...' ? current : parseInt(i);
      href = prefix + page;
      extraClass = i === current ? ' current' : '';
      return "<li class=\"page" + extraClass + "\"><a href=\"" + href + "\">" + i + "</a></li>";
    });
    return "<nav class=\"page-nav\"><ul>" + (html.join('')) + "</ul></nav>";
  };

  /*
  Load standard View for posts list page
  
  @param [String] container id of container, 'index', for example.
  @param [Object] posts original posts object
  @param [Interger] current current page number (starts from 1)
  */


  View.prototype.list = function(container, posts, currentPage) {
    var pages,
      _this = this;
    currentPage = currentPage != null ? parseInt(currentPage) : 1;
    pages = posts.pages;
    posts = posts.posts;
    if (posts.length === 0) {
      return this.error();
    }
    posts = posts.map(function(post) {
      return "<article class=\"article\">      <header>        <a href=\"#!/archives/" + post.id + "\"><span class=\"date\">" + (post.date.substring(0, 10)) + "</span> " + post.title + "</a>      </header>    </article>";
    });
    return this.sidebar(function(html) {
      html += "<div id=\"sections\">        <section class=\"section\">          <header><h1>" + (_this.current()) + ": " + router.args[0] + "</h1></header>          " + (posts.join('')) + "          " + (_this.pageNav(pages, currentPage)) + "        </section>      </div>";
      return $('#' + container).html(html);
    });
  };

  /*
  Load standard View for error page
  
  @param [String] title 
  @param [String] msg
  */


  View.prototype.error = function(title, msg) {
    var html;
    if (!((title != null) || (msg != null))) {
      title = '404：没有找到您要找的内容';
      msg = '请点击 <a href="#">这里</a> 返回首页';
    }
    this.current('error');
    html = "<div id=\"error\"><h1>" + title + "</h1><p>" + msg + "</p></div>";
    return $('#error').html(html);
  };

  /*
  Load standard View for post
  
  @param [Interger] id post id
  */


  View.prototype.post = function(id) {
    var _this = this;
    this.current('post');
    return this.resetUyan(function() {
      return _this.data.get('post', id, function(post) {
        var html;
        if (!post) {
          return _this.error();
        }
        html = "<article class=\"single\">          <header>            <h1>              <a href=\"#!/archives/" + post.id + "\">" + post.title + "</a>            </h1>          </header>          <div class=\"content\">" + post.content + "</div>          <footer id=\"comments\">" + config.uyanHTML + "</footer>        </article>";
        return $('#post').html(html);
      });
    });
  };

  /*
  Load standard View for index
  
  @param [Interger] page page
  */


  View.prototype.index = function() {
    var page, sections,
      _this = this;
    page = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.current('index');
    gallery.start();
    /*
    Callback standard HTML for index sections
    
    @param [Function] callback function to handle html
    */

    sections = function(callback) {
      return _this.data.get('categories', function(categories) {
        var html, max;
        sections = config.indexSections.map(function(id) {
          var cat, _i, _len;
          for (_i = 0, _len = categories.length; _i < _len; _i++) {
            cat = categories[_i];
            if (cat.id === id) {
              return cat.title;
            }
          }
          return null;
        });
        callback = _.after(sections.length, callback);
        max = 5;
        html = sections.map(function(elem) {
          return '';
        });
        return _.each(sections, function(section, index) {
          return this.data.get('categorie', section, 1, function(data) {
            var posts;
            posts = _.first(data.posts, max);
            posts = posts.map(function(post) {
              return "<article class=\"article\">              <header>                <a href=\"#!/archives/" + post.id + "\"><span class=\"date\">" + (post.date.substring(0, 10)) + "</span> " + post.title + "</a>              </header>            </article>";
            });
            html[index] = "<section class=\"section\"><header><h1>" + section + "</h1></header>" + (posts.join('')) + "</section>";
            return callback(html.join(''));
          });
        });
      });
    };
    return sections(function(data) {
      return _this.sidebar(function(html) {
        html += "<div id=\"sections\">" + data + "</div>";
        return $('#index').html(html);
      });
    });
  };

  /*
  Load standard View for categorie
  
  @param [String] categorie
  @param [Interger] page page (starts from 1)
  */


  View.prototype.categorie = function() {
    var categorie, page,
      _this = this;
    categorie = arguments[0], page = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.current('categorie');
    return this.data.get('categorie', categorie, page[0], function(posts) {
      return _this.list('categorie', posts, page[0]);
    });
  };

  /*
  Load standard View for search
  
  @param [String] keyword
  @param [Interger] page page (starts from 1)
  */


  View.prototype.search = function() {
    var keyword, page,
      _this = this;
    keyword = arguments[0], page = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.current('search');
    return this.data.get('search', keyword, page[0], function(posts) {
      return _this.list('search', posts, page[0]);
    });
  };

  /*
  Refresh current view
  */


  View.prototype.refresh = function() {
    return router.apply();
  };

  return View;

})();

view = new View;

$(function() {
  var submitSearch;
  submitSearch = function() {
    var keyword;
    keyword = $('#search-input').val();
    if (!(keyword.length > 0)) {
      return;
    }
    return router.navigate("#!/search/" + keyword);
  };
  $('body').on('click', '#search-box i', submitSearch);
  $('body').on('keydown', '#search-input', function(e) {
    if (e.keyCode === 13) {
      return submitSearch();
    }
  });
  return $(window).on('hashchange', function() {
    return $('html, body').animate({
      scrollTop: 0
    }, 200);
  });
});

Router = (function() {

  function Router() {
    var _this = this;
    this.routes = {};
    $(window).on('hashchange', function() {
      return _this.apply();
    });
  }

  Router.prototype.add = function(route, callback) {
    route = route.replace(new RegExp(':\\w+', 'g'), '([^\/]+)');
    route = route.replace(new RegExp('/', 'g'), '\\/');
    return this.routes["^" + route + "$"] = callback;
  };

  Router.prototype.navigate = function(url) {
    url = url.split('#').pop();
    return window.location.hash = '#' + url;
  };

  Router.prototype.current = function() {
    return window.location.hash;
  };

  Router.prototype.apply = function() {
    var fn, path, reg, regexp, _ref, _results;
    path = window.location.hash.toString().split('#').pop();
    _ref = this.routes;
    _results = [];
    for (reg in _ref) {
      fn = _ref[reg];
      regexp = new RegExp(reg);
      if (regexp.test(path)) {
        this.args = regexp.exec(path).slice(1);
        _results.push(fn.apply(window, this.args));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return Router;

})();

router = new Router;

routes = {
  '': function() {
    return view.index();
  },
  "!/page/:page": function(page) {
    return view.index(page);
  },
  "!/archives/:id": function(id) {
    return view.post(id);
  },
  "!/search/:query": function(query) {
    return view.search(query);
  },
  "!/search/:query/:page": function(query, page) {
    return view.search(query, page);
  },
  "!/tag/:tag": function(tag) {
    return view.tag(tag);
  },
  "!/tag/:tag/:page": function(tag, page) {
    return view.tag(tag, page);
  },
  "!/categorie/:cat": function(cat) {
    return view.categorie(cat);
  },
  "!/categorie/:cat/:page": function(cat, page) {
    return view.categorie(cat, page);
  },
  "!/error": function() {
    return view.error();
  }
};

for (route in routes) {
  fn = routes[route];
  router.add(route, fn);
}

router.apply();

$('body').on('click', 'a', function(e) {
  var href;
  href = $(this).attr('href');
  if (!href) {
    return;
  }
  e.preventDefault();
  e.stopPropagation();
  if (href.indexOf('#') === 0) {
    return router.navigate(href);
  } else {
    return window.location.href = href;
  }
});
